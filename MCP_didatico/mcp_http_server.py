#!/usr/bin/env python3
"""
Servidor MCP via HTTP

Este servidor implementa o protocolo MCP (Model Context Protocol) completo
via transporte HTTP, permitindo que clientes MCP se conectem via HTTP.
"""

from fastmcp import FastMCP
import uvicorn
from typing import Any

# Cria o servidor MCP
server = FastMCP("Math Server")

@server.tool()
def add(a: int, b: int) -> int:
    """Soma dois n√∫meros inteiros.
    
    Args:
        a: Primeiro n√∫mero
        b: Segundo n√∫mero
        
    Returns:
        A soma de a + b
    """
    return a + b

@server.tool()
def subtract(a: int, b: int) -> int:
    """Subtrai dois n√∫meros inteiros.
    
    Args:
        a: Primeiro n√∫mero (minuendo)
        b: Segundo n√∫mero (subtraendo)
        
    Returns:
        A diferen√ßa de a - b
    """
    return a - b

@server.tool()
def multiply(a: int, b: int) -> int:
    """Multiplica dois n√∫meros inteiros.
    
    Args:
        a: Primeiro n√∫mero
        b: Segundo n√∫mero
        
    Returns:
        O produto de a * b
    """
    return a * b

@server.tool()
def divide(a: int, b: int) -> float:
    """Divide dois n√∫meros inteiros.
    
    Args:
        a: Dividendo
        b: Divisor (n√£o pode ser zero)
        
    Returns:
        O quociente de a / b
        
    Raises:
        ValueError: Se b for zero
    """
    if b == 0:
        raise ValueError("Divis√£o por zero n√£o √© permitida")
    return a / b

@server.tool()
def power(base: int, exponent: int) -> int:
    """Calcula a pot√™ncia de um n√∫mero.
    
    Args:
        base: N√∫mero base
        exponent: Expoente
        
    Returns:
        base elevado √† pot√™ncia exponent
    """
    return base ** exponent

@server.tool()
def factorial(n: int) -> int:
    """Calcula o fatorial de um n√∫mero.
    
    Args:
        n: N√∫mero n√£o-negativo
        
    Returns:
        O fatorial de n
        
    Raises:
        ValueError: Se n for negativo
    """
    if n < 0:
        raise ValueError("Fatorial n√£o √© definido para n√∫meros negativos")
    if n == 0 or n == 1:
        return 1
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def main():
    """Inicia o servidor MCP via HTTP"""
    print("üöÄ Iniciando Servidor MCP via HTTP...")
    print("üì° Protocolo: MCP (Model Context Protocol)")
    print("üåê Transporte: HTTP")
    print("üîß Ferramentas dispon√≠veis:")
    print("   ‚Ä¢ add - Soma dois n√∫meros")
    print("   ‚Ä¢ subtract - Subtrai dois n√∫meros")
    print("   ‚Ä¢ multiply - Multiplica dois n√∫meros")
    print("   ‚Ä¢ divide - Divide dois n√∫meros")
    print("   ‚Ä¢ power - Calcula pot√™ncia")
    print("   ‚Ä¢ factorial - Calcula fatorial")
    print("\nüìç Servidor rodando em: http://localhost:8001")
    print("üìö Documenta√ß√£o MCP: http://localhost:8001/docs")
    print("\nüîó Para conectar um cliente MCP:")
    print("   URL: http://localhost:8001")
    print("   Transporte: HTTP")
    print("\n‚ö° Pressione Ctrl+C para parar o servidor")
    
    # Usa o m√©todo run() do FastMCP com transporte HTTP
    server.run(
        transport="http",
        host="0.0.0.0",
        port=8001
    )

if __name__ == "__main__":
    main()